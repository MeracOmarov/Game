// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domen.Entities.Bet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AnotherUserBet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IDofMatchHistory")
                        .HasColumnType("integer");

                    b.Property<string>("OneUserBet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("IDofMatchHistory");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("Domen.Entities.MatchHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("MatchHistories");
                });

            modelBuilder.Entity("Domen.Entities.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("AcceptingUserID")
                        .HasColumnType("integer");

                    b.Property<double>("AmountOfTransaction")
                        .HasColumnType("double precision");

                    b.Property<int>("SendingUserID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("AcceptingUserID");

                    b.HasIndex("SendingUserID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domen.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PIN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domen.Entities.UserMatchHistory", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<int>("MatchHistoryID")
                        .HasColumnType("integer");

                    b.HasKey("UserID", "MatchHistoryID");

                    b.HasIndex("MatchHistoryID");

                    b.ToTable("UserMatchHistories");
                });

            modelBuilder.Entity("Domen.Entities.Bet", b =>
                {
                    b.HasOne("Domen.Entities.MatchHistory", "MatchHistory")
                        .WithMany("Bets")
                        .HasForeignKey("IDofMatchHistory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchHistory");
                });

            modelBuilder.Entity("Domen.Entities.Transaction", b =>
                {
                    b.HasOne("Domen.Entities.User", "AcceptingUser")
                        .WithMany()
                        .HasForeignKey("AcceptingUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domen.Entities.User", "SendingUser")
                        .WithMany()
                        .HasForeignKey("SendingUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptingUser");

                    b.Navigation("SendingUser");
                });

            modelBuilder.Entity("Domen.Entities.UserMatchHistory", b =>
                {
                    b.HasOne("Domen.Entities.MatchHistory", "MatchHistory")
                        .WithMany("UserMatchHistory")
                        .HasForeignKey("MatchHistoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domen.Entities.User", "User")
                        .WithMany("UserMatchHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchHistory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domen.Entities.MatchHistory", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("UserMatchHistory");
                });

            modelBuilder.Entity("Domen.Entities.User", b =>
                {
                    b.Navigation("UserMatchHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
